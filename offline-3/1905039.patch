diff --git a/.gitignore b/.gitignore
index 07216f3..49d7d79 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,4 @@ mkfs
 kernel/kernel
 user/usys.S
 .gdbinit
+.vscode/
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..7dba73c 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/random.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test1\
+	$U/_test2\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..43e87ae 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,10 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// random.c
+void            set_seed(uint64);
+uint64          get_random_int();
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..addf643 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,17 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC                   64                  // maximum number of processes
+#define NCPU                    8                   // maximum number of CPUs
+#define NOFILE                  16                  // open files per process
+#define NFILE                   100                 // open files per system
+#define NINODE                  50                  // maximum number of active i-nodes
+#define NDEV                    10                  // maximum major device number
+#define ROOTDEV                 1                   // device number of file system root disk
+#define MAXARG                  32                  // max exec arguments
+#define MAXOPBLOCKS             10                  // max # of blocks any FS op writes
+#define LOGSIZE                 (MAXOPBLOCKS * 3)   // max data blocks in on-disk log
+#define NBUF                    (MAXOPBLOCKS * 3)   // size of disk block cache
+#define FSSIZE                  2000                // size of file system in blocks
+#define MAXPATH                 128                 // maximum file path name
+#define DEFAULT_TICKET_COUNT    10                  // default ticket count for each process
+#define TIME_LIMIT_1            1                   // queue 1 time slice weight
+#define TIME_LIMIT_2            2                   // queue 2 time slice weight
+#define BOOST_INTERVAL          64                  // interval for process ticket boost
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..1dbe662 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -145,6 +145,10 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->tickets_original = DEFAULT_TICKET_COUNT;
+  p->tickets_current = DEFAULT_TICKET_COUNT;
+  p->queue = 0;
+  p->time_slices = 0;
 
   return p;
 }
@@ -169,6 +173,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tickets_original = 0;
+  p->tickets_current = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -444,29 +450,146 @@ wait(uint64 addr)
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *running_proc = 0;
+  struct proc *next_round_robin_proc = proc;
   struct cpu *c = mycpu();
+  uint64 time_slice_streak = 0;
+
+  acquire(&tickslock);
+
+  uint64 start_ticks = ticks;
+
+  release(&tickslock);
   
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+    acquire(&tickslock);
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    uint64 current_ticks = ticks;
+
+    release(&tickslock);
+
+    if(current_ticks - start_ticks >= BOOST_INTERVAL) {
+      // boosting processes
+      for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+        acquire(&p->lock);
+        if(p->state != UNUSED) {
+          p->tickets_current = p->tickets_original;
+        }
+        release(&p->lock);
       }
-      release(&p->lock);
+
+      start_ticks = current_ticks;
+    }
+
+    if(running_proc == 0) {
+      // if no process is being scheduled right now, one is chosen
+      uint64 total_tickets = 0;
+      for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+        // count total tickets
+        acquire(&p->lock);
+        if(p->state != UNUSED && p->queue == 0) {
+          if(p->tickets_current > 0) {
+            total_tickets += p->tickets_current;
+          } else {
+            p->queue = 1;
+          }
+        }
+        release(&p->lock);
+      }
+
+      if(total_tickets > 0) {
+        // if there are tickets
+        // this means that there is something in queue 1 which needs to be dealt
+        uint64 remain_value = get_random_int() % total_tickets;
+        for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+          acquire(&p->lock);
+          if(p->state != UNUSED && p->queue == 0) {
+            if(remain_value > p->tickets_current) {
+              remain_value -= p->tickets_current;
+            } else {
+              running_proc = p;
+              time_slice_streak = TIME_LIMIT_1;
+
+              release(&p->lock);
+
+              break;
+            }
+          }
+          release(&p->lock);
+        }
+      } else {
+        // if queue 1 empty, schedule in round robin fasion
+        while(running_proc == 0) {
+          acquire(&next_round_robin_proc->lock);
+          if(next_round_robin_proc->state != UNUSED && next_round_robin_proc->queue == 1) {
+            running_proc = next_round_robin_proc;
+            time_slice_streak = TIME_LIMIT_2;
+          }
+          release(&next_round_robin_proc->lock);
+
+          ++next_round_robin_proc;
+
+          if(next_round_robin_proc == &proc[NPROC]) {
+            next_round_robin_proc = proc;
+          }
+        }
+      }
+    }
+
+    acquire(&running_proc->lock);
+    if(running_proc->state == RUNNABLE) {
+      // Switch to chosen process.  It is the process's job
+      // to release its lock and then reacquire it
+      // before jumping back to us.
+      running_proc->state = RUNNING;
+      c->proc = running_proc;
+      swtch(&c->context, &running_proc->context);
+
+      // Process is done running for now.
+      // It should have changed its running_proc->state before coming back.
+      c->proc = 0;
+      if(time_slice_streak == 0) {
+        release(&running_proc->lock);
+        running_proc = 0;
+      } else {
+        if(running_proc->queue == 0) {
+          if(running_proc->tickets_current > 0) {
+            --running_proc->tickets_current;
+          } else {
+            running_proc->queue = 1;
+          }
+        }
+        --time_slice_streak;
+      }
+    } else if(running_proc->state == RUNNING) {
+      // calculate tickets and slice streaks
+      if(time_slice_streak == 0) {
+        release(&running_proc->lock);
+        running_proc = 0;
+      } else {
+        if(running_proc->queue == 0) {
+          if(running_proc->tickets_current > 0) {
+            --running_proc->tickets_current;
+          } else {
+            running_proc->queue = 1;
+          }
+        }
+        --time_slice_streak;
+      }
+    } else {
+      // if process not active, reschedule another process and switch context
+      if(running_proc->queue == 0) {
+        running_proc->queue = 1;
+      }
+      release(&running_proc->lock);
+      running_proc = 0;
+    }
+
+    if(running_proc) {
+      release(&running_proc->lock);
     }
   }
 }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3ae020a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 tickets_original;     // tickets count after set
+  uint64 tickets_current;      // current tickets count
+  uint8 queue;                 // scheuler queue
+  uint64 time_slices;          // time slices since process creation
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..4d50dc0
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,15 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+    int pid[NPROC];                 // the process ID of each process
+    int inuse[NPROC];               // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC];                 // which queue the process is currently in
+    int tickets_original[NPROC];    // the number of tickets each process originally had
+    int tickets_current[NPROC];     // the number of tickets each process currently has
+    int time_slices[NPROC];         // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..12e835b
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,25 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+#define CONSTANT_1 6
+#define CONSTANT_2 9
+#define CONSTANT_3 420
+
+uint64 seed = 0;
+
+void set_seed(uint64 value)
+{
+    seed = value;
+}
+
+uint64 get_random_int()
+{
+    seed = (CONSTANT_1 * seed + CONSTANT_2) % CONSTANT_3;
+
+    return seed;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ead422a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,35 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]        sys_fork,
+[SYS_exit]        sys_exit,
+[SYS_wait]        sys_wait,
+[SYS_pipe]        sys_pipe,
+[SYS_read]        sys_read,
+[SYS_kill]        sys_kill,
+[SYS_exec]        sys_exec,
+[SYS_fstat]       sys_fstat,
+[SYS_chdir]       sys_chdir,
+[SYS_dup]         sys_dup,
+[SYS_getpid]      sys_getpid,
+[SYS_sbrk]        sys_sbrk,
+[SYS_sleep]       sys_sleep,
+[SYS_uptime]      sys_uptime,
+[SYS_open]        sys_open,
+[SYS_write]       sys_write,
+[SYS_mknod]       sys_mknod,
+[SYS_unlink]      sys_unlink,
+[SYS_link]        sys_link,
+[SYS_mkdir]       sys_mkdir,
+[SYS_close]       sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]    sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..88bcb9c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,24 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup         10
+#define SYS_getpid      11
+#define SYS_sbrk        12
+#define SYS_sleep       13
+#define SYS_uptime      14
+#define SYS_open        15
+#define SYS_write       16
+#define SYS_mknod       17
+#define SYS_unlink      18
+#define SYS_link        19
+#define SYS_mkdir       20
+#define SYS_close       21
+#define SYS_settickets  22
+#define SYS_getpinfo    23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3c196d9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,9 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
+
+extern struct proc proc[NPROC];
 
 uint64
 sys_exit(void)
@@ -89,3 +92,58 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int arg;
+
+  argint(0, &arg);
+
+  if(arg > 0)
+  {
+    myproc()->tickets_original = arg;
+    myproc()->tickets_current = arg;
+
+    return 0;
+  }
+
+  return -1;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 arg;
+
+  argaddr(0, &arg);
+
+  struct proc *p;
+  struct pstat process_stats;
+  uint64 next = 0;
+
+  for(p = proc; p < &proc[NPROC]; ++p) {
+    acquire(&p->lock);
+
+    if(p->pid > 0)
+    {
+      process_stats.pid[next] = p->pid;
+      process_stats.inuse[next] = !(p->state == UNUSED);
+      process_stats.inQ[next] = 0;
+      process_stats.tickets_original[next] = p->tickets_original;
+      process_stats.tickets_current[next] = p->tickets_current;
+      process_stats.time_slices[next] = 0;
+      ++next;
+    }
+
+    release(&p->lock);
+  }
+
+  struct proc *this_proc = myproc();
+
+  acquire(&this_proc->lock);
+  int return_value = copyout(this_proc->pagetable, arg, (char *)&process_stats, sizeof(struct pstat));
+  release(&this_proc->lock);
+
+  return return_value;
+}
\ No newline at end of file
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..471f600
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include <user/user.h>
+
+int main()
+{
+    // int id = 1;
+
+    // if(fork() == 0)
+    // {
+    //     id = 2;
+    // }
+
+    while(1)
+    {
+        // printf("test %d: %d\n", id, i);
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/test2.c b/user/test2.c
new file mode 100644
index 0000000..b8873a3
--- /dev/null
+++ b/user/test2.c
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include <user/user.h>
+
+int main()
+{
+    printf("pid = %d\n", getpid());
+
+    exit(0);
+}
\ No newline at end of file
