diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..d5f9712
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..553fb97 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,16 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// proc_queue.c
+int             push_proc(struct proc *);
+struct proc *   top_proc();
+int             pop_proc();
+uint64          proc_queue_size();
+
+// random.c
+void            set_seed(uint64);
+uint64          get_random_int();
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..91d02bb 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,14 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC                   64                  // maximum number of processes
+#define NCPU                    8                   // maximum number of CPUs
+#define NOFILE                  16                  // open files per process
+#define NFILE                   100                 // open files per system
+#define NINODE                  50                  // maximum number of active i-nodes
+#define NDEV                    10                  // maximum major device number
+#define ROOTDEV                 1                   // device number of file system root disk
+#define MAXARG                  32                  // max exec arguments
+#define MAXOPBLOCKS             10                  // max # of blocks any FS op writes
+#define LOGSIZE                 (MAXOPBLOCKS * 3)   // max data blocks in on-disk log
+#define NBUF                    (MAXOPBLOCKS * 3)   // size of disk block cache
+#define FSSIZE                  2000                // size of file system in blocks
+#define MAXPATH                 128                 // maximum file path name
+#define DEFAULT_TICKET_COUNT    10                  // default ticket count for each process
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..2097697 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -145,6 +145,8 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->tickets_original = DEFAULT_TICKET_COUNT;
+  p->tickets_current = DEFAULT_TICKET_COUNT;
 
   return p;
 }
@@ -169,6 +171,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tickets_original = 0;
+  p->tickets_current = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..1eeb91c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 tickets_original;     // tickets count after set
+  uint64 tickets_current;      // current tickets count
 };
diff --git a/kernel/proc_queue.c b/kernel/proc_queue.c
new file mode 100644
index 0000000..ba7c2b8
--- /dev/null
+++ b/kernel/proc_queue.c
@@ -0,0 +1,67 @@
+#include "param.h"
+#include "types.h"
+#include "defs.h"
+#include "proc_queue.h"
+
+struct proc_queue_node *head;
+struct proc_queue_node queue_elements[NPROC];
+uint64 size = 0;
+
+int push_proc(struct proc *proc)
+{
+    if(size >= NPROC)
+    {
+        return -1; // queue full, unlikely case tho
+    }
+
+    struct proc_queue_node *empty_node;
+    struct proc_queue_node *p;
+
+    for(p = queue_elements; p < &queue_elements[NPROC]; ++p) {
+        if(p->proc == 0) {
+            empty_node = p;
+
+            break;
+        }
+    }
+
+    struct proc_queue_node *current = head;
+
+    while(current->next) {
+        current = current->next;
+    }
+    
+    empty_node->proc = proc;
+    current->next = empty_node;
+    ++size;
+
+    return 0;
+}
+
+struct proc *top_proc()
+{
+    if(head->next) {
+        return head->next->proc;
+    } else {
+        return 0;
+    }
+}
+
+int pop_proc()
+{
+    if(head->next) {
+        struct proc_queue_node *to_empty = head->next->proc;
+        head->next = to_empty->next;
+        to_empty->proc = to_empty->next = 0;
+        --size;
+
+        return 0;
+    } else {
+        return -1; // nothing to pop
+    }
+}
+
+uint64 proc_queue_size()
+{
+    return size;
+}
\ No newline at end of file
diff --git a/kernel/proc_queue.h b/kernel/proc_queue.h
new file mode 100644
index 0000000..39e9c87
--- /dev/null
+++ b/kernel/proc_queue.h
@@ -0,0 +1,4 @@
+struct proc_queue_node {
+    struct proc *proc;
+    struct proc_queue_node *next;
+};
\ No newline at end of file
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..c1aac70
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,15 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+    int pid[NPROC];                 // the process ID of each process 
+    int inuse[NPROC];               // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC];                 // which queue the process is currently in 
+    int tickets_original[NPROC];    // the number of tickets each process originally had
+    int tickets_current[NPROC];     // the number of tickets each process currently has
+    int time_slices[NPROC];         // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..658c49c
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,20 @@
+#include "types.h"
+#include "defs.h"
+
+#define CONSTANT_1 6
+#define CONSTANT_2 9
+#define CONSTANT_3 420
+
+uint64 seed = 0;
+
+void set_seed(uint64 value)
+{
+    seed = value;
+}
+
+uint64 get_random_int()
+{
+    seed = (CONSTANT_1 * seed + CONSTANT_2) % CONSTANT_3;
+
+    return seed;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ead422a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,35 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]        sys_fork,
+[SYS_exit]        sys_exit,
+[SYS_wait]        sys_wait,
+[SYS_pipe]        sys_pipe,
+[SYS_read]        sys_read,
+[SYS_kill]        sys_kill,
+[SYS_exec]        sys_exec,
+[SYS_fstat]       sys_fstat,
+[SYS_chdir]       sys_chdir,
+[SYS_dup]         sys_dup,
+[SYS_getpid]      sys_getpid,
+[SYS_sbrk]        sys_sbrk,
+[SYS_sleep]       sys_sleep,
+[SYS_uptime]      sys_uptime,
+[SYS_open]        sys_open,
+[SYS_write]       sys_write,
+[SYS_mknod]       sys_mknod,
+[SYS_unlink]      sys_unlink,
+[SYS_link]        sys_link,
+[SYS_mkdir]       sys_mkdir,
+[SYS_close]       sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]    sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..88bcb9c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,24 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup         10
+#define SYS_getpid      11
+#define SYS_sbrk        12
+#define SYS_sleep       13
+#define SYS_uptime      14
+#define SYS_open        15
+#define SYS_write       16
+#define SYS_mknod       17
+#define SYS_unlink      18
+#define SYS_link        19
+#define SYS_mkdir       20
+#define SYS_close       21
+#define SYS_settickets  22
+#define SYS_getpinfo    23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..c22b73c 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,9 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
+
+extern struct proc proc[NPROC];
 
 uint64
 sys_exit(void)
@@ -89,3 +92,58 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int arg;
+
+  argint(0, &arg);
+
+  if(arg > 0)
+  {
+    myproc()->tickets_original = arg;
+    myproc()->tickets_current = arg;
+
+    return 0;
+  }
+
+  return -1;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 arg;
+
+  argaddr(0, &argaddr);
+
+  struct proc *p;
+  struct pstat process_stats;
+  uint64 next = 0;
+
+  for(p = proc; p < &proc[NPROC]; ++p) {
+    acquire(&p->lock);
+
+    if(p->pid > 0)
+    {
+      process_stats.pid[next] = p->pid;
+      process_stats.inuse[next] = !(p->state == UNUSED);
+      process_stats.inQ[next] = 0;
+      process_stats.tickets_original[next] = p->tickets_original;
+      process_stats.tickets_current[next] = p->tickets_current;
+      process_stats.time_slices[next] = 0;
+      ++next;
+    }
+
+    release(&p->lock);
+  }
+
+  struct proc *this_proc = myproc();
+
+  acquire(&this_proc->lock);
+  int return_value = copyout(this_proc->pagetable, arg, (char *)&process_stats, sizeof(struct pstat));
+  release(&this_proc->lock);
+
+  return return_value;
+}
\ No newline at end of file
