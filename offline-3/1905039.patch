diff --git a/.gitignore b/.gitignore
index 07216f3..49d7d79 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,4 @@ mkfs
 kernel/kernel
 user/usys.S
 .gdbinit
+.vscode/
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..f66b11b 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/random.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -56,7 +57,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -fno-omit-frame-pointer -ggdb -gdwarf-2
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -132,6 +133,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test1\
+	$U/_test2\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +158,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..43e87ae 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,10 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// random.c
+void            set_seed(uint64);
+uint64          get_random_int();
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..b494d7b 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define DEFAULT_TICKET_COUNT    10                  // default ticket count for each process
+#define TIME_LIMIT_1            1                   // queue 1 time slice weight
+#define TIME_LIMIT_2            2                   // queue 2 time slice weight
+#define BOOST_INTERVAL          64                  // interval for process ticket boost
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..9af68ae 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,6 +10,8 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct spinlock proc_lock;
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -145,6 +147,10 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->tickets_original = DEFAULT_TICKET_COUNT;
+  p->tickets_current = DEFAULT_TICKET_COUNT;
+  p->queue = 0;
+  p->time_slices = 0;
 
   return p;
 }
@@ -169,6 +175,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tickets_original = 0;
+  p->tickets_current = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -302,6 +310,10 @@ fork(void)
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
+  // set tickets equal to parents
+  np->tickets_original = p->tickets_original;
+  np->tickets_current = p->tickets_current;
+
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
@@ -444,29 +456,145 @@ wait(uint64 addr)
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *running_proc = 0;
+  struct proc *next_round_robin_proc = proc;
   struct cpu *c = mycpu();
+  uint64 time_slice_streak = 0;
+
+  // acquire(&tickslock);
+
+  // uint64 start_ticks = ticks;
+
+  // release(&tickslock);
   
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+    // acquire(&tickslock);
+
+    // uint64 current_ticks = ticks;
+
+    // release(&tickslock);
+
+    // if(current_ticks - start_ticks >= BOOST_INTERVAL) {
+    //   // boosting processes
+    //   for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+    //     acquire(&p->lock);
+    //     if(p->state != UNUSED) {
+    //       p->tickets_current = p->tickets_original;
+    //       p->queue = 0;
+    //     }
+    //     release(&p->lock);
+    //   }
+
+    //   start_ticks = current_ticks;
+    // }
+
+    while(running_proc == 0) {
+      // if no process is being scheduled right now, one is chosen
+      uint64 total_tickets = 0;
+      acquire(&proc_lock);
+      for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+        // count total tickets
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->queue == 0) {
+          if(p->tickets_current > 0) {
+            total_tickets += p->tickets_current;
+          } else {
+            p->queue = 1;
+          }
+        }
+        release(&p->lock);
+      }
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      if(total_tickets > 0) {
+        // if there are tickets
+        // this means that there is something in queue 1 which needs to be dealt
+        uint64 remain_value = get_random_int() % total_tickets + 1;
+        for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+          acquire(&p->lock);
+          if(p->state == RUNNABLE && p->queue == 0) {
+            if(remain_value > p->tickets_current) {
+              remain_value -= p->tickets_current;
+            } else {
+              running_proc = p;
+              time_slice_streak = TIME_LIMIT_1;
+              release(&p->lock);
+              release(&proc_lock);
+
+              break;
+            }
+          }
+          release(&p->lock);
+        }
+      } else {
+        // if queue 1 empty, schedule in round robin fasion
+        release(&proc_lock);
+        uint64 count = 0;
+        while(running_proc == 0) {
+          if(count >= 64)
+          {
+            break;
+          }
+
+          acquire(&next_round_robin_proc->lock);
+          if(next_round_robin_proc->state != UNUSED && next_round_robin_proc->queue == 1) {
+            running_proc = next_round_robin_proc;
+            time_slice_streak = TIME_LIMIT_2;
+          }
+          release(&next_round_robin_proc->lock);
+
+          ++next_round_robin_proc;
+
+          if(next_round_robin_proc == &proc[NPROC]) {
+            next_round_robin_proc = proc;
+          }
+          ++count;
+        }
       }
-      release(&p->lock);
+    }
+
+    // printf("%d %d %d %d\n", proc[3].pid, proc[3].state, proc[3].queue, proc[3].tickets_current);
+
+    acquire(&running_proc->lock);
+    if(running_proc->state == RUNNABLE) {
+      // Switch to chosen process.  It is the process's job
+      // to release its lock and then reacquire it
+      // before jumping back to us.
+      running_proc->state = RUNNING;
+      c->proc = running_proc;
+      swtch(&c->context, &running_proc->context);
+
+      // Process is done running for now.
+      // It should have changed its running_proc->state before coming back.
+      c->proc = 0;
+
+      if(running_proc->queue == 0) {
+        if(running_proc->tickets_current > 0) {
+          --running_proc->tickets_current;
+        }
+      }
+      --time_slice_streak;
+      ++running_proc->time_slices;
+      if(time_slice_streak <= 0) {
+        if(running_proc->queue == 0) {
+          running_proc->queue = 1;
+        }
+        release(&running_proc->lock);
+        running_proc = 0;
+      }
+    } else if(running_proc->state == SLEEPING || running_proc->state == ZOMBIE) {
+      // if process not active, reschedule another process and switch context
+      if(running_proc->queue == 1) {
+        running_proc->queue = 0;
+      }
+      release(&running_proc->lock);
+      running_proc = 0;
+    }
+
+    if(running_proc) {
+      release(&running_proc->lock);
     }
   }
 }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3ae020a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 tickets_original;     // tickets count after set
+  uint64 tickets_current;      // current tickets count
+  uint8 queue;                 // scheuler queue
+  uint64 time_slices;          // time slices since process creation
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..4d50dc0
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,15 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+    int pid[NPROC];                 // the process ID of each process
+    int inuse[NPROC];               // whether this slot of the process table is being used (1 or 0)
+    int inQ[NPROC];                 // which queue the process is currently in
+    int tickets_original[NPROC];    // the number of tickets each process originally had
+    int tickets_current[NPROC];     // the number of tickets each process currently has
+    int time_slices[NPROC];         // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..39e5c21
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,23 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+uint64 get_random_int()
+{
+  static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+  unsigned int b;
+  b  = ((z1 << 6) ^ z1) >> 13;
+  z1 = ((z1 & 4294967294U) << 18) ^ b;
+  b  = ((z2 << 2) ^ z2) >> 27;
+  z2 = ((z2 & 4294967288U) << 2) ^ b;
+  b  = ((z3 << 13) ^ z3) >> 21;
+  z3 = ((z3 & 4294967280U) << 7) ^ b;
+  b  = ((z4 << 3) ^ z4) >> 12;
+  z4 = ((z4 & 4294967168U) << 13) ^ b;
+
+  return (z1 ^ z2 ^ z3 ^ z4) / 2;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f315343 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]    sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..88bcb9c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,24 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup         10
+#define SYS_getpid      11
+#define SYS_sbrk        12
+#define SYS_sleep       13
+#define SYS_uptime      14
+#define SYS_open        15
+#define SYS_write       16
+#define SYS_mknod       17
+#define SYS_unlink      18
+#define SYS_link        19
+#define SYS_mkdir       20
+#define SYS_close       21
+#define SYS_settickets  22
+#define SYS_getpinfo    23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..1d7e692 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,9 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
+
+extern struct proc proc[NPROC];
 
 uint64
 sys_exit(void)
@@ -89,3 +92,56 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int arg;
+
+  argint(0, &arg);
+
+  if(arg > 0) {
+    myproc()->tickets_original = arg;
+    myproc()->tickets_current = arg;
+
+    return 0;
+  }
+
+  return -1;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 arg;
+
+  argaddr(0, &arg);
+
+  struct proc *p;
+  struct pstat process_stats;
+  uint64 next = 0;
+
+  for(p = proc; p < &proc[NPROC]; ++p) {
+    acquire(&p->lock);
+    process_stats.pid[next] = p->pid;
+    if(p->state == UNUSED) {
+      process_stats.inuse[next] = -1;
+    } else {
+      process_stats.inuse[next] = p->state == RUNNABLE || p->state == RUNNING;
+    }
+    process_stats.inQ[next] = p->queue + 1;
+    process_stats.tickets_original[next] = p->tickets_original;
+    process_stats.tickets_current[next] = p->tickets_current;
+    process_stats.time_slices[next] = p->time_slices;
+    ++next;
+    release(&p->lock);
+  }
+
+  struct proc *this_proc = myproc();
+
+  acquire(&this_proc->lock);
+  int return_value = copyout(this_proc->pagetable, arg, (char *)&process_stats, sizeof(struct pstat));
+  release(&this_proc->lock);
+
+  return return_value;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..7b5efcc 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -10,6 +10,9 @@ struct spinlock tickslock;
 uint ticks;
 
 extern char trampoline[], uservec[], userret[];
+extern struct proc proc[NPROC];
+
+extern struct spinlock proc_lock;
 
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
@@ -166,6 +169,21 @@ clockintr()
   acquire(&tickslock);
   ticks++;
   wakeup(&ticks);
+
+  if(ticks % BOOST_INTERVAL == 0) {
+    // boosting processes
+    acquire(&proc_lock);
+    for(struct proc *p = proc; p < &proc[NPROC]; ++p) {
+      acquire(&p->lock);
+      if(p->state != UNUSED) {
+        p->tickets_current = p->tickets_original;
+        p->queue = 0;
+      }
+      release(&p->lock);
+    }
+    release(&proc_lock);
+  }
+
   release(&tickslock);
 }
 
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..77eceb8
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,43 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char** argv)
+{
+    if(argc > 1)
+    {
+        int arg = atoi(argv[1]);
+
+        if(settickets(arg) == 0)
+        {
+            printf("Setting tickets to %d successful\n", arg);
+            int pid = fork();
+
+            if(pid == 0)
+            {
+                while(1);
+
+                exit(0);
+            }
+            else if(pid < 0)
+            {
+                printf("Failed to create dummyproc\n", arg);
+                exit(-1);
+            }
+            else
+            {
+                exit(0);
+            }
+        }
+        else
+        {
+            printf("Failed to set tickets\n");
+            exit(-1);
+        }
+    }
+    else
+    {
+        printf("Need one argument\n");
+        exit(-1);
+    }
+}
\ No newline at end of file
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..a86b0c4
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,25 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include <user/user.h>
+
+int main()
+{
+    // int id = 1;
+
+    // if(fork() == 0)
+    // {
+    //     id = 2;
+    // }
+
+    int v = 0;
+
+    for(int i = 1; i <= 100000; ++i)
+    {
+        printf("a\b");
+        ++v;
+    }
+
+    printf("test 1 shows %d\n", v);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/test2.c b/user/test2.c
new file mode 100644
index 0000000..b8873a3
--- /dev/null
+++ b/user/test2.c
@@ -0,0 +1,10 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include <user/user.h>
+
+int main()
+{
+    printf("pid = %d\n", getpid());
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..6515c28
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,28 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int main(int argc, char **argv)
+{
+    struct pstat process_stat;
+    int return_value = getpinfo(&process_stat);
+
+    if(return_value)
+    {
+        printf("Failed to get process info\n");
+        exit(-1);
+    }
+
+    printf("PID\t|\tIn Use\t|\tinQ\t|\tOriginal Tickets\t|\tCurrent Tickets\t|\tTime Slices\n");
+
+    for(uint64 i = 0; i < NPROC; ++i)
+    {
+        if(process_stat.inuse[i] != -1)
+        {
+            printf("%d\t\t%d\t\t%d\t\t\t%d\t\t\t\t%d\t\t%d\n", process_stat.pid[i], process_stat.inuse[i], process_stat.inQ[i], process_stat.tickets_original[i], process_stat.tickets_current[i], process_stat.time_slices[i]);
+        }
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
