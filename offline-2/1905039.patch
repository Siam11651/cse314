diff --git a/.gitignore b/.gitignore
index 07216f3..61ed10a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,4 @@ mkfs
 kernel/kernel
 user/usys.S
 .gdbinit
+.vscode
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..3b626b6 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_exit\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1fb5542 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -134,19 +136,23 @@ int             strncmp(const char*, const char*, uint);
 char*           strncpy(char*, const char*, int);
 
 // syscall.c
-void            argint(int, int*);
-int             argstr(int, char*, int);
-void            argaddr(int, uint64 *);
-int             fetchstr(uint64, char*, int);
-int             fetchaddr(uint64, uint64*);
-void            syscall();
+void                    argint(int, int*);
+int                     argstr(int, char*, int);
+void                    argaddr(int, uint64 *);
+int                     fetchstr(uint64, char*, int);
+int                     fetchaddr(uint64, uint64*);
+void                    syscallstatinit(void);
+struct syscall_stat*    get_syscall_stats(void);
+void                    lock_syscall_stat(uint64);
+void                    unlock_syscall_stat(uint64);
+void                    syscall(void);
 
 // trap.c
-extern uint     ticks;
-void            trapinit(void);
-void            trapinithart(void);
-extern struct spinlock tickslock;
-void            usertrapret(void);
+extern uint             ticks;
+void                    trapinit(void);
+void                    trapinithart(void);
+extern struct spinlock  tickslock;
+void                    usertrapret(void);
 
 // uart.c
 void            uartinit(void);
@@ -185,5 +191,8 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// start.c
+void            timerhalt(void);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..c72c5c2 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
+        # scratch[40] : halt flag set by timerhalt.
         
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # halt if timerhalt has set halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +127,14 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
\ No newline at end of file
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..4fadafc 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -16,19 +16,20 @@ main()
     printf("\n");
     printf("xv6 kernel is booting\n");
     printf("\n");
-    kinit();         // physical page allocator
-    kvminit();       // create kernel page table
-    kvminithart();   // turn on paging
-    procinit();      // process table
-    trapinit();      // trap vectors
-    trapinithart();  // install kernel trap vector
-    plicinit();      // set up interrupt controller
-    plicinithart();  // ask PLIC for device interrupts
-    binit();         // buffer cache
-    iinit();         // inode table
-    fileinit();      // file table
+    kinit();            // physical page allocator
+    kvminit();          // create kernel page table
+    kvminithart();      // turn on paging
+    procinit();         // process table
+    trapinit();         // trap vectors
+    trapinithart();     // install kernel trap vector
+    plicinit();         // set up interrupt controller
+    plicinithart();     // ask PLIC for device interrupts
+    binit();            // buffer cache
+    iinit();            // inode table
+    fileinit();         // file table
+    syscallstatinit();  // set up syscall stat locks
     virtio_disk_init(); // emulated hard disk
-    userinit();      // first user process
+    userinit();         // first user process
     __sync_synchronize();
     started = 1;
   } else {
@@ -41,5 +42,5 @@ main()
     plicinithart();   // ask PLIC for device interrupts
   }
 
-  scheduler();        
+  scheduler();
 }
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..0cd9310 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,14 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC           64               // maximum number of processes
+#define NCPU            8                // maximum number of CPUs
+#define NOFILE          16               // open files per process
+#define NFILE           100              // open files per system
+#define NINODE          50               // maximum number of active i-nodes
+#define NDEV            10               // maximum major device number
+#define ROOTDEV         1                // device number of file system root disk
+#define MAXARG          32               // max exec arguments
+#define MAXOPBLOCKS     10               // max # of blocks any FS op writes
+#define LOGSIZE         (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define NBUF            (MAXOPBLOCKS*3)  // size of disk block cache
+#define FSSIZE          2000             // size of file system in blocks
+#define MAXPATH         128              // maximum file path name
+#define SYSCALL_COUNT   24               // number of system calls available
diff --git a/kernel/printf.c b/kernel/printf.c
index 1a50203..7246eea 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -123,6 +123,7 @@ panic(char *s)
   printf(s);
   printf("\n");
   panicked = 1; // freeze uart output from other CPUs
+  timerhalt();
   for(;;)
     ;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..2c2953c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -14,6 +14,7 @@ struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
+uint64 tracer_pid;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -380,6 +381,8 @@ exit(int status)
 
   release(&wait_lock);
 
+  p->trace = 0;
+
   // Jump into the scheduler, never to return.
   sched();
   panic("zombie exit");
@@ -681,3 +684,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+// traces the given system call number for a single process
+int
+trace(int syscall_num)
+{
+  if(syscall_num > SYSCALL_COUNT)
+  {
+    return -1;
+  }
+
+  myproc()->trace = syscall_num;
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..391bc83 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 trace;                // Trace system call
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..5a1bb21 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +73,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scratch[5] : halt flag to signal halt to timervec.
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +89,10 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void
+timerhalt()
+{
+  // set halt flag in scratch area for hartid[0] to 1.
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..7fdfb3f 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -4,6 +4,7 @@
 #include "riscv.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_stat.h"
 #include "syscall.h"
 #include "defs.h"
 
@@ -101,6 +102,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_shutdown(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +130,213 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+[SYS_shutdown]sys_shutdown,
 };
 
+char *syscall_names[] = {
+  [SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_history] "history",
+[SYS_shutdown]"shutdown",
+};
+
+uint64 syscall_arg_count[] = {
+[SYS_fork]    0,
+[SYS_exit]    1,
+[SYS_wait]    1,
+[SYS_pipe]    1,
+[SYS_read]    3,
+[SYS_kill]    1,
+[SYS_exec]    2,
+[SYS_fstat]   2,
+[SYS_chdir]   1,
+[SYS_dup]     1,
+[SYS_getpid]  0,
+[SYS_sbrk]    1,
+[SYS_sleep]   1,
+[SYS_uptime]  0,
+[SYS_open]    2,
+[SYS_write]   3,
+[SYS_mknod]   3,
+[SYS_unlink]  1,
+[SYS_link]    2,
+[SYS_mkdir]   1,
+[SYS_close]   1,
+[SYS_trace]   1,
+[SYS_history] 2,
+[SYS_shutdown]0,
+};
+
+uint64 syscall_arg_list[][6] = {
+[SYS_fork]    {0, 0, 0, 0, 0, 0},
+[SYS_exit]    {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_wait]    {SYS_ARG_POINTER, 0, 0, 0, 0, 0},
+[SYS_pipe]    {SYS_ARG_POINTER, 0, 0, 0, 0, 0},
+[SYS_read]    {SYS_ARG_INT, SYS_ARG_POINTER, SYS_ARG_INT, 0, 0, 0},
+[SYS_kill]    {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_exec]    {SYS_ARG_CHAR_POINTER, SYS_ARG_POINTER, 0, 0, 0, 0},
+[SYS_fstat]   {SYS_ARG_INT, SYS_ARG_POINTER, 0, 0, 0, 0},
+[SYS_chdir]   {SYS_ARG_CHAR_POINTER, 0, 0, 0, 0, 0},
+[SYS_dup]     {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_getpid]  {0, 0, 0, 0, 0, 0},
+[SYS_sbrk]    {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_sleep]   {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_uptime]  {0, 0, 0, 0, 0, 0},
+[SYS_open]    {SYS_ARG_CHAR_POINTER, SYS_ARG_INT, 0, 0, 0, 0},
+[SYS_write]   {SYS_ARG_INT, SYS_ARG_POINTER, SYS_ARG_INT, 0, 0, 0},
+[SYS_mknod]   {SYS_ARG_CHAR_POINTER, SYS_ARG_INT, SYS_ARG_INT, 0, 0, 0},
+[SYS_unlink]  {SYS_ARG_CHAR_POINTER, 0, 0, 0, 0, 0},
+[SYS_link]    {SYS_ARG_CHAR_POINTER, SYS_ARG_CHAR_POINTER, 0, 0, 0, 0},
+[SYS_mkdir]   {SYS_ARG_CHAR_POINTER, 0, 0, 0, 0, 0},
+[SYS_close]   {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_trace]   {SYS_ARG_INT, 0, 0, 0, 0, 0},
+[SYS_history] {SYS_ARG_INT, SYS_ARG_POINTER, 0, 0, 0, 0},
+[SYS_shutdown]{0, 0, 0, 0, 0, 0},
+};
+
+struct syscall_stat syscall_stats[] = {
+[SYS_fork]    {"fork", 0, 0},
+[SYS_exit]    {"exit", 0, 0},
+[SYS_wait]    {"wait", 0, 0},
+[SYS_pipe]    {"pipe", 0, 0},
+[SYS_read]    {"read", 0, 0},
+[SYS_kill]    {"kill", 0, 0},
+[SYS_exec]    {"exec", 0, 0},
+[SYS_fstat]   {"fstat", 0, 0},
+[SYS_chdir]   {"chdir", 0, 0},
+[SYS_dup]     {"dup", 0, 0},
+[SYS_getpid]  {"getpid", 0, 0},
+[SYS_sbrk]    {"sbrk", 0, 0},
+[SYS_sleep]   {"sleep", 0, 0},
+[SYS_uptime]  {"uptime", 0, 0},
+[SYS_open]    {"open", 0, 0},
+[SYS_write]   {"write", 0, 0},
+[SYS_mknod]   {"mknod", 0, 0},
+[SYS_unlink]  {"unlink", 0, 0},
+[SYS_link]    {"link", 0, 0},
+[SYS_mkdir]   {"mkdir", 0, 0},
+[SYS_close]   {"close", 0, 0},
+[SYS_trace]   {"trace", 0, 0},
+[SYS_history] {"history", 0, 0},
+[SYS_shutdown]{"shutdown", 0, 0},
+};
+
+struct spinlock syscall_stat_locks[] = {
+[SYS_fork]    {},
+[SYS_exit]    {},
+[SYS_wait]    {},
+[SYS_pipe]    {},
+[SYS_read]    {},
+[SYS_kill]    {},
+[SYS_exec]    {},
+[SYS_fstat]   {},
+[SYS_chdir]   {},
+[SYS_dup]     {},
+[SYS_getpid]  {},
+[SYS_sbrk]    {},
+[SYS_sleep]   {},
+[SYS_uptime]  {},
+[SYS_open]    {},
+[SYS_write]   {},
+[SYS_mknod]   {},
+[SYS_unlink]  {},
+[SYS_link]    {},
+[SYS_mkdir]   {},
+[SYS_close]   {},
+[SYS_trace]   {},
+[SYS_history] {},
+[SYS_shutdown]{},
+};
+
+void
+syscallstatinit()
+{
+  initlock(&syscall_stat_locks[SYS_fork], "syscall_fork");
+  initlock(&syscall_stat_locks[SYS_exit], "syscall_exit");
+  initlock(&syscall_stat_locks[SYS_wait], "syscall_wait");
+  initlock(&syscall_stat_locks[SYS_pipe], "syscall_pipe");
+  initlock(&syscall_stat_locks[SYS_read], "syscall_read");
+  initlock(&syscall_stat_locks[SYS_kill], "syscall_kill");
+  initlock(&syscall_stat_locks[SYS_exec], "syscall_exec");
+  initlock(&syscall_stat_locks[SYS_fstat], "syscall_fstat");
+  initlock(&syscall_stat_locks[SYS_chdir], "syscall_chdir");
+  initlock(&syscall_stat_locks[SYS_dup], "syscall_dup");
+  initlock(&syscall_stat_locks[SYS_getpid], "syscall_getpid");
+  initlock(&syscall_stat_locks[SYS_sbrk], "syscall_sbrk");
+  initlock(&syscall_stat_locks[SYS_sleep], "syscall_sleep");
+  initlock(&syscall_stat_locks[SYS_uptime], "syscall_uptime");
+  initlock(&syscall_stat_locks[SYS_open], "syscall_open");
+  initlock(&syscall_stat_locks[SYS_write], "syscall_write");
+  initlock(&syscall_stat_locks[SYS_mknod], "syscall_mknod");
+  initlock(&syscall_stat_locks[SYS_unlink], "syscall_unlink");
+  initlock(&syscall_stat_locks[SYS_link], "syscall_link");
+  initlock(&syscall_stat_locks[SYS_mkdir], "syscall_mkdir");
+  initlock(&syscall_stat_locks[SYS_close], "syscall_close");
+  initlock(&syscall_stat_locks[SYS_trace], "syscall_trace");
+  initlock(&syscall_stat_locks[SYS_history], "syscall_history");
+  initlock(&syscall_stat_locks[SYS_history], "syscall_shutdown");
+}
+
+void
+lock_syscall_stat(uint64 syscall_num)
+{
+  acquire(&syscall_stat_locks[syscall_num]);
+}
+
+void
+unlock_syscall_stat(uint64 syscall_num)
+{
+  release(&syscall_stat_locks[syscall_num]);
+}
+
+struct syscall_stat*
+get_syscall_stats(void)
+{
+  return syscall_stats;
+}
+
+uint64
+exec_syscall(int syscall_num, uint64 *start_ticks, uint64 *end_ticks)
+{
+  acquire(&tickslock);
+
+  *start_ticks = ticks;
+
+  release(&tickslock);
+
+  uint64 return_value = syscalls[syscall_num]();
+
+  acquire(&tickslock);
+
+  *end_ticks = ticks;
+
+  release(&tickslock);
+
+  return return_value;
+}
+
 void
 syscall(void)
 {
@@ -135,10 +344,72 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+
+    uint64 start_ticks = 0, end_ticks = 0;
+
+    acquire(&syscall_stat_locks[num]);
+
+    ++syscall_stats[num].count;
+
+    release(&syscall_stat_locks[num]);
+
+    if(p->trace > 0 && p->trace == num)
+    {
+      printf("pid: %d, syscall: %s, args: (",
+              p->pid, syscall_names[num]);
+
+      uint64 arg_count = syscall_arg_count[num];
+
+      for(uint64 i = 0; i < arg_count; ++i)
+      {
+        uint64 arg_type = syscall_arg_list[num][i];
+
+        if(arg_type == SYS_ARG_INT)
+        {
+          int arg;
+
+          argint(i, &arg);
+          printf("%d",
+                  arg);
+        } else if(arg_type == SYS_ARG_POINTER) {
+          uint64 arg;
+
+          argaddr(i, &arg);
+          printf("%p",
+                  arg);
+        } else if(arg_type == SYS_ARG_CHAR_POINTER) {
+          char arg[300];
+
+          argstr(i, arg, 300);
+          printf("%s", arg);
+        } else {
+          // unlikely case
+        }
+
+        if(i < arg_count - 1)
+        {
+          printf(", ");
+        }
+      }
+
+      uint64 return_value = exec_syscall(num, &start_ticks, &end_ticks);
+      p->trapframe->a0 = return_value;
+
+      printf("), return: %d\n",
+              return_value);
+    } else {
+      p->trapframe->a0 = exec_syscall(num, &start_ticks, &end_ticks);
+    }
+
+    acquire(&syscall_stat_locks[num]);
+
+    syscall_stats[num].accum_time += (end_ticks - start_ticks) / 10;
+
+    release(&syscall_stat_locks[num]);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..295c033 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,30 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup         10
+#define SYS_getpid      11
+#define SYS_sbrk        12
+#define SYS_sleep       13
+#define SYS_uptime      14
+#define SYS_open        15
+#define SYS_write       16
+#define SYS_mknod       17
+#define SYS_unlink      18
+#define SYS_link        19
+#define SYS_mkdir       20
+#define SYS_close       21
+#define SYS_trace       22
+#define SYS_history     23
+#define SYS_shutdown    24
+
+// System call ARGeter type numbers
+#define SYS_ARG_INT             1
+#define SYS_ARG_POINTER         2
+#define SYS_ARG_CHAR_POINTER    3
\ No newline at end of file
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..2475acc
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,5 @@
+struct syscall_stat {
+    char syscall_name[16];
+    int count;
+    int accum_time;
+};
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..d50b814 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -4,6 +4,7 @@
 #include "param.h"
 #include "memlayout.h"
 #include "spinlock.h"
+#include "syscall_stat.h"
 #include "proc.h"
 
 uint64
@@ -89,3 +90,53 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int syscall_num;
+
+  argint(0, &syscall_num);
+
+  return trace(syscall_num);
+}
+
+uint64
+sys_history(void)
+{
+  int syscall_num;
+  uint64 data_address;
+
+  argint(0, &syscall_num);
+  argaddr(1, &data_address);
+
+  if(0 < syscall_num && syscall_num < SYSCALL_COUNT)
+  {
+    lock_syscall_stat(syscall_num);
+
+    struct syscall_stat *syscall_stats = get_syscall_stats();
+
+    copyout(myproc()->pagetable, data_address, (char *)&syscall_stats[syscall_num], sizeof(struct syscall_stat));
+    unlock_syscall_stat(syscall_num);
+
+    return (uint64)&syscall_stats[syscall_num];
+  }
+  else
+  {
+    return 0;
+  }
+}
+
+extern void timervec();
+
+uint64 sys_shutdown()
+{
+  asm volatile("lui a1, 0x100");
+  asm volatile("lui a2, 0x5");
+  asm volatile("addi a2, a2, 0x555");
+  asm volatile("sw a2, 0(a1)");
+
+  // timerhalt();
+
+  return 0;
+}
diff --git a/user/exit.c b/user/exit.c
new file mode 100644
index 0000000..7e41897
--- /dev/null
+++ b/user/exit.c
@@ -0,0 +1,11 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main()
+{
+    shutdown();
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..733d3d2
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,48 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/syscall_stat.h"
+#include "user/user.h"
+
+void
+print_stat(struct syscall_stat stat)
+{
+    printf("syscall: %s, #: %d, time: %d\n", stat.syscall_name, stat.count, stat.accum_time);
+}
+
+int
+main(int argc, char *argv[])
+{
+    if(argc > 1)
+    {
+        int arg = atoi(argv[1]);
+        struct syscall_stat stat;
+
+        int return_value = history(arg, &stat);
+
+        if(return_value <= 0)
+        {
+            exit(-1);
+        }
+
+        print_stat(stat);
+    }
+    else
+    {
+        for(uint64 i = 1; i < SYSCALL_COUNT; ++i)
+        {
+            struct syscall_stat stat;
+
+            int return_value = history(i, &stat);
+
+            if(return_value <= 0)
+            {
+                exit(-1);
+            }
+
+            printf("%d:\t", i);
+            print_stat(stat);
+        }
+    }
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..afcf447
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,29 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  int num = atoi(argv[1]);
+
+  if (trace(num) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..5b119ed 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, void*);
+int shutdown();
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..db2bd3c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("shutdown");
