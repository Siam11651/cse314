diff --git a/Makefile b/Makefile
index 39a99d7..a87d873 100644
--- a/Makefile
+++ b/Makefile
@@ -56,7 +56,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -fno-omit-frame-pointer -ggdb -gdwarf-2
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +154,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..11b4c70 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             clone(void (*)(void *), void *, void *);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +166,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+void             uvmmirror(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..5160a21 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -15,6 +15,9 @@ struct proc *initproc;
 int nextpid = 1;
 struct spinlock pid_lock;
 
+int nextmemid = 1;
+struct spinlock memid_lock;
+
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
@@ -50,6 +53,7 @@ procinit(void)
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
+  initlock(&memid_lock, "nextmemid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
@@ -102,6 +106,19 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int memid;
+  
+  acquire(&memid_lock);
+  memid = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&memid_lock);
+
+  return memid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -288,6 +305,8 @@ fork(void)
     return -1;
   }
 
+  np->memid = allocmemid();
+
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -681,3 +700,58 @@ procdump(void)
     printf("\n");
   }
 }
+
+int clone(void (* fcn)(void *), void *arg, void *stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  np->memid = p->memid;
+
+  // Mirror user memory from parent to child.
+  uvmmirror(p->pagetable, np->pagetable, p->sz);
+
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->trapframe->a0 = 0;
+
+  // Set argument
+  np->trapframe->a0 = (uint64)arg;
+
+  // // Set stack pointer
+  np->trapframe->sp = (uint64)stack + PGSIZE - 3 * sizeof(void*);
+
+  // // Set thread routine
+  np->trapframe->epc = (uint64)fcn;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..2e057be 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 memid;                // Process memory id
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..9073e78 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_clone(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_clone]   sys_clone,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..f9ca940 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_clone  22
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..a49c656 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,17 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_clone(void)
+{
+  uint64 start_routine_address;
+  uint64 argument_address;
+  uint64 stack_address;
+
+  argaddr(0, &start_routine_address);
+  argaddr(1, &argument_address);
+  argaddr(2, &stack_address);
+
+  return clone((void (*)(void *))start_routine_address, (void *)argument_address, (void *)stack_address);
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..47f6730 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -332,6 +332,21 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+void
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *opte;
+  pte_t *npte;
+
+  for(uint64 i = 0; i < sz; i += PGSIZE){
+    if((opte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: old pte should exist");
+    if((npte = walk(new, i, 1)) == 0)
+      panic("uvmmirror: new pte should exist");
+    *npte = *opte;
+  }
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..8478cad
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,59 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+uint64 glob = 69;
+
+void foo(void *arg)
+{
+    int a = 1;
+
+    for(; ; )
+    {
+        printf("b %d %d\n", a, glob);
+
+        ++a;
+
+        if(a % 100 == 0)
+        {
+            if(glob == 69)
+            {
+                glob = 420;
+            }
+            else
+            {
+                glob = 69;
+            }
+        }
+    }
+}
+
+int main()
+{
+    void *stack = malloc(4096);
+
+    thread_create(foo, 0, stack);
+
+    int a = 1;
+
+    for(; ; )
+    {
+        printf("a %d %d\n", a, glob);
+
+        ++a;
+
+        if(a % 100 == 0)
+        {
+            if(glob == 69)
+            {
+                glob = 420;
+            }
+            else
+            {
+                glob = 69;
+            }
+        }
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..c91cb3f 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -145,3 +145,8 @@ memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
 }
+
+int thread_create(void (* start_routine)(void *), void *arg, void *stack)
+{
+  return clone(start_routine, arg, stack);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..71a518c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int clone(void (*)(void *), void *, void *);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +40,4 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+int thread_create(void (*)(void *), void *, void *);
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f398d4e 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("clone");
\ No newline at end of file
